@page "/school-report"
@using VaxSync.Web.Data
@using VaxSync.Web.Models
@using Microsoft.EntityFrameworkCore
@inject ApplicationDbContext Db
@inject AuthenticationStateProvider AuthState
@inject Microsoft.AspNetCore.Identity.UserManager<ApplicationUser> UserManager

<PageTitle>School Reports</PageTitle>

<h3 class="mb-4">School Compliance Report</h3>

<div class="mb-3">
    <label class="form-label">Filter by Status:</label>
    <select class="form-select" @bind="selectedStatus">
        <option value="">All</option>
        <option value="Compliant">‚úÖ Compliant</option>
        <option value="Pending">‚ö†Ô∏è Pending</option>
        <option value="Not Compliant">‚ùå Not Compliant</option>
    </select>
</div>

<table class="table table-bordered table-striped">
    <thead class="table-light">
        <tr>
            <th>Student ID</th>
            <th>Full Name</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in FilteredStudents)
        {
            <tr>
                <td>@student.Id</td>
                <td>@($"{student.FirstName} {student.LastName}")</td>
                <td>
                    @if (student.IsCompliant)
                    {
                        <span class="text-success">‚úÖ Compliant</span>
                    }
                    else
                    {
                        <span class="text-warning">‚ö†Ô∏è Pending</span>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<button class="btn btn-outline-primary" @onclick="ExportReport">
    üìÑ Export Report (Coming Soon)
</button>

@code {
    private string selectedStatus = "";
    private List<Student> students = new();
    private IEnumerable<Student> FilteredStudents => string.IsNullOrEmpty(selectedStatus)
        ? students
        : students.Where(s =>
            selectedStatus == "Compliant" && s.IsCompliant ||
            selectedStatus == "Pending" && !s.IsCompliant ||
            selectedStatus == "Not Compliant" && !s.IsCompliant);

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(state.User);

        // For school-level users, filter by their assigned school
        if (user is not null && !string.IsNullOrEmpty(user.SchoolId))
        {
            students = await Db.Students
                .Where(s => s.SchoolId == user.SchoolId)
                .AsNoTracking()
                .ToListAsync();
        }
        else
        {
            // Admins or unscoped users see all
            students = await Db.Students.AsNoTracking().ToListAsync();
        }
    }

    private void ExportReport()
    {
        // Placeholder for Excel or PDF export later
        Console.WriteLine("Export report clicked (feature coming soon)");
    }
}

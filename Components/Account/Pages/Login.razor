@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using VaxSync.Web.Components.Account
@using VaxSync.Web.Data   @* <-- make sure this matches your real namespace (avoid Vax_Sync vs VaxSync mismatch) *@

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<Login> Logger

<PageTitle>Log in</PageTitle>

<div class="login-shell">
    <MudPaper Class="login-card" Elevation="6">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h3" Class="fw-semibold">Welcome back</MudText>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                Use your VaxSync account to access dashboards and tools.
            </MudText>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@errorMessage</MudAlert>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudStack Spacing="4">
                    <MudTextField @bind-Value="Input.Email"
                                  For="@(() => Input.Email)"
                                  Label="Email"
                                  Placeholder="name@example.com"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email" />

                    <MudTextField @bind-Value="Input.Password"
                                  For="@(() => Input.Password)"
                                  Label="Password"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password" />

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudCheckBox @bind-Checked="Input.RememberMe" Label="Remember me" T="bool" />
                        <MudLink Href="/Account/ForgotPassword" Class="mud-typography-body2">Forgot password?</MudLink>
                    </MudStack>

                    <MudButton Type="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true">
                        Log in
                    </MudButton>

                    <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="mt-2 link-stack">
                        <MudText Typo="Typo.body1" Class="mud-text-secondary">Don’t have an account?</MudText>
                        <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                                 Class="mud-typography-body2">
                            Register a new account
                        </MudLink>
                        <MudLink Href="/Account/ResendEmailConfirmation" Class="mud-typography-body2">
                            Resend confirmation email
                        </MudLink>
                    </MudStack>
                </MudStack>
            </EditForm>
        </MudStack>
    </MudPaper>
</div>

@code {
    private string? errorMessage;
    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    // If you arrive here because a protected page redirected you, this will be populated.
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Optional: clears any external auth cookie so each login starts clean.
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            var destination = await ResolveRedirectTargetAsync();
            RedirectManager.RedirectTo(destination);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private async Task<string> ResolveRedirectTargetAsync()
    {
        if (!string.IsNullOrWhiteSpace(ReturnUrl) && !IsRoot(ReturnUrl))
        {
            return ReturnUrl!;
        }

        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            return "/";
        }
        else if (result.RequiresTwoFactor)
        {
            return "/admin-dashboard";
        }
        else if (result.IsLockedOut)
        {
            return "/nurse-dashboard";
        }
        else
        {
            return "/viewer-dashboard";
        }

        return "/";
    }

    private sealed class InputModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = "";

        [Required, DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using VaxSync.Web.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="login-shell">
    <MudPaper Class="login-card" Elevation="6">
        <MudStack Spacing="2">
            <MudText Typo="Typo.h4" Class="fw-semibold">Welcome back</MudText>
            <MudText Typo="Typo.body1" Class="mud-text-secondary">Use your VaxSync account to access dashboards and tools.</MudText>

            <StatusMessage Message="@errorMessage" />

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudStack Spacing="2">
                    <MudTextField @bind-Value="Input.Email"
                                  For="@(() => Input.Email)"
                                  Label="Email"
                                  Placeholder="name@example.com"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email"
                                  Class="mb-1" />

                    <MudTextField @bind-Value="Input.Password"
                                  For="@(() => Input.Password)"
                                  Label="Password"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password" />

                    <MudStack Direction="Row" AlignItems="Center" Justify="Space-Between" Class="mt-1">
                        <MudCheckBox @bind-Checked="Input.RememberMe" Label="Remember me" />
                        <MudLink Href="/Account/ForgotPassword" Class="mud-typography-body2">Forgot password?</MudLink>
                    </MudStack>

                    <MudButton Type="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Loading="@isSubmitting"
                               Disabled="@isSubmitting">
                        Log in
                    </MudButton>

                    <MudStack AlignItems="Center" Spacing="0.5" Class="mt-2">
                        <MudText Typo="Typo.body2" Class="mud-text-secondary">Don't have an account?</MudText>
                        <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" Class="mud-typography-body2">
                            Register a new account
                        </MudLink>
                        <MudLink Href="/Account/ResendEmailConfirmation" Class="mud-typography-body2">
                            Resend confirmation email
                        </MudLink>
                    </MudStack>
                </MudStack>
            </EditForm>
        </MudStack>
    </MudPaper>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private bool isSubmitting;

    public async Task LoginUser()
    {
        if (isSubmitting)
        {
            return;
        }

        try
        {
            isSubmitting = true;

            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
            {
                RedirectManager.RedirectTo(
                    "Account/LoginWith2fa",
                    new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                RedirectManager.RedirectTo("Account/Lockout");
            }
            else
            {
                errorMessage = "Error: Invalid login attempt.";
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

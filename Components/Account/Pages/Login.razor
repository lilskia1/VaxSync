@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using MudBlazor
@using VaxSync.Web.Data   @* <-- make sure this matches your real namespace (avoid Vax_Sync vs VaxSync mismatch) *@

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager Nav
@inject ILogger<Login> Logger

<PageTitle>Log in</PageTitle>

<div class="login-shell">
    <MudPaper Class="login-card" Elevation="6">
        <MudStack Spacing="4">
            <MudText Typo="Typo.h3" Class="fw-semibold">Welcome back</MudText>
            <MudText Typo="Typo.subtitle1" Class="mud-text-secondary">
                Use your VaxSync account to access dashboards and tools.
            </MudText>

            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Variant="Variant.Outlined">@errorMessage</MudAlert>
            }

            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <MudStack Spacing="4">
                    <MudTextField @bind-Value="Input.Email"
                                  For="@(() => Input.Email)"
                                  Label="Email"
                                  Placeholder="name@example.com"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Email"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Email" />

                    <MudTextField @bind-Value="Input.Password"
                                  For="@(() => Input.Password)"
                                  Label="Password"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Lock"
                                  Variant="Variant.Outlined"
                                  InputType="InputType.Password" />

                    <MudStack Direction="Row" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudCheckBox @bind-Checked="Input.RememberMe" Label="Remember me" T="bool" />
                        <MudLink Href="/Account/ForgotPassword" Class="mud-typography-body2">Forgot password?</MudLink>
                    </MudStack>

                    <MudButton Type="ButtonType.Submit"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               FullWidth="true"
                               Loading="@isSubmitting"
                               Disabled="@isSubmitting">
                        Log in
                    </MudButton>

                    <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="mt-2 link-stack">
                        <MudText Typo="Typo.body1" Class="mud-text-secondary">Don’t have an account?</MudText>
                        <MudLink Href="@(Nav.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))"
                                 Class="mud-typography-body2">
                            Register a new account
                        </MudLink>
                        <MudLink Href="/Account/ResendEmailConfirmation" Class="mud-typography-body2">
                            Resend confirmation email
                        </MudLink>
                    </MudStack>
                </MudStack>
            </EditForm>
        </MudStack>
    </MudPaper>
</div>

@code {
    private string? errorMessage;
    private bool isSubmitting;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    // If you arrive here because a protected page redirected you, this will be populated.
    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Optional: clears any external auth cookie so each login starts clean.
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        if (isSubmitting) return;

        try
        {
            isSubmitting = true;

            var result = await SignInManager.PasswordSignInAsync(
                Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);

            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                await RedirectByRoleOrReturnUrlAsync();
                return;
            }

            if (result.RequiresTwoFactor)
            {
                // If you use 2FA, keep this; otherwise you can remove it.
                Nav.NavigateTo($"/Account/LoginWith2fa?returnUrl={Uri.EscapeDataString(ReturnUrl ?? string.Empty)}&rememberMe={(Input.RememberMe ? "true" : "false")}");
                return;
            }

            if (result.IsLockedOut)
            {
                Nav.NavigateTo("/Account/Lockout");
                return;
            }

            errorMessage = "Invalid login attempt.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private async Task RedirectByRoleOrReturnUrlAsync()
    {
        // If we were sent here from a protected page, honor that—unless it’s just "/" (we don’t do a general dashboard).
        if (!string.IsNullOrWhiteSpace(ReturnUrl) && !IsRoot(ReturnUrl))
        {
            Nav.NavigateTo(ReturnUrl!, replace: true);
            return;
        }

        // Look up the user and send them to their specific dashboard. Priority order if multiple roles exist.
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Fallback: send home (or login again) if something’s off.
            Nav.NavigateTo("/", replace: true);
            return;
        }

        if (await UserManager.IsInRoleAsync(user, "Admin"))
        {
            Nav.NavigateTo("/admin-dashboard", replace: true);
            return;
        }

        if (await UserManager.IsInRoleAsync(user, "SchoolNurse"))
        {
            Nav.NavigateTo("/nurse-dashboard", replace: true);
            return;
        }

        if (await UserManager.IsInRoleAsync(user, "Viewer"))
        {
            Nav.NavigateTo("/viewer-dashboard", replace: true);
            return;
        }

        // If the user has no known role, keep it obvious.
        errorMessage = "Your account doesn’t have a role assigned. Contact an administrator.";
        StateHasChanged();
    }

    private static bool IsRoot(string url)
        => string.Equals(url.Trim(), "/", StringComparison.OrdinalIgnoreCase);

    private sealed class InputModel
    {
        [Required, EmailAddress]
        public string Email { get; set; } = "";

        [Required, DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}

@page "/student-details/{id}"
@using MudBlazor
@using Microsoft.EntityFrameworkCore
@using VaxSync.Web.Models
@using VaxSync.Web.Data
@inject ApplicationDbContext Db
@inject NavigationManager Nav

<PageTitle>Student Details</PageTitle>

@if (isLoading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (student is null)
{
    <MudAlert Severity="Severity.Warning">Student not found.</MudAlert>
}
else
{
    <MudContainer Class="mt-4">
        <MudText Typo="Typo.h5">@($"{student.FirstName} {student.LastName}")</MudText>
        <MudText Class="mud-text-secondary">
            School: @(student.School?.Code ?? student.SchoolId)
            â€¢ DOB: @($"{student.DateOfBirth:yyyy-MM-dd}")
        </MudText>

        <MudPaper Class="p-3 mt-3">
            <MudText Typo="Typo.h6" Class="mb-2">Vaccination Records</MudText>

            <MudTable Items="@(student.Vaccines ?? new List<StudentVaccine>())" Dense="true" Hover="true" Bordered="true">
                <HeaderContent>
                    <MudTh>Vaccine</MudTh>
                    <MudTh>Dose</MudTh>
                    <MudTh>Date</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Vaccine">@context.Vaccine?.Name</MudTd>
                    <MudTd DataLabel="Dose">@context.DoseNumber</MudTd>
                    <MudTd DataLabel="Date">@($"{context.DateGiven:yyyy-MM-dd}")</MudTd>
                </RowTemplate>
            </MudTable>

            <MudButton Variant="Variant.Outlined"
                       StartIcon="@Icons.Material.Filled.ArrowBack"
                       Class="mt-2"
                       OnClick="GoBack">
                Back to Search
            </MudButton>
        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter] public string id { get; set; } = ""; // Student.Id is string in your model

    private Student? student;
    private bool isLoading = true;

    protected override async Task OnParametersSetAsync()
    {
        isLoading = true;

        student = await Db.Students
            .Include(s => s.School)
            .Include(s => s.Vaccines)
                .ThenInclude(sv => sv.Vaccine)
            .AsNoTracking()
            .FirstOrDefaultAsync(s => s.Id == id);

        isLoading = false;
    }

    private void GoBack() => Nav.NavigateTo("/student-lookup");
}

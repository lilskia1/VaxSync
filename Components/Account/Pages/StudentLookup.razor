@page "/student-lookup"
@using MudBlazor
@using VaxSync.Web.Models
@using VaxSync.Web.Data
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject ApplicationDbContext Db
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthState
@inject NavigationManager Nav

<PageTitle>Student Lookup</PageTitle>

<MudPaper Class="p-4 mb-4">
  <MudGrid>
    <MudItem xs="12" sm="6" md="4">
      <MudTextField @bind-Value="SearchText"
                    Label="School ID or SSN"
                    Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.Search"
                    Immediate="true"
                    DebounceInterval="300" />
    </MudItem>
        <MudItem xs="12" sm="6" md="3">
            <MudSelect T="string" @bind-Value="StatusFilter" Label="Status">
                <MudSelectItem Value="@StatusAll">All</MudSelectItem>
                <MudSelectItem Value="@StatusCompliant">Compliant</MudSelectItem>
                <MudSelectItem Value="@StatusPending">Pending</MudSelectItem>
                <MudSelectItem Value="@StatusNotCompliant">Not Compliant</MudSelectItem>
            </MudSelect>
        </MudItem>
    <MudItem xs="12" sm="12" md="5" Class="d-flex align-end">
      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Search">Search</MudButton>
      <MudButton Class="ml-2" Variant="Variant.Outlined" OnClick="Clear">Clear</MudButton>
    </MudItem>
  </MudGrid>
</MudPaper>

@if (!Searched)
{
  <MudAlert Severity="Severity.Info" Elevation="0">Enter an ID or SSN and click Search.</MudAlert>
}
else if (Students.Count == 0)
{
  <MudPaper Class="p-6">No students found.</MudPaper>
}
else
{
  <MudTable Items="Students" Dense="true" Hover="true" RowsPerPage="25" Bordered="true" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
      <MudTh>Full Name</MudTh>
      <MudTh>DOB</MudTh>
      <MudTh>School ID</MudTh>
      <MudTh>Status</MudTh>
      <MudTh>Actions</MudTh>
    </HeaderContent>
    <RowTemplate>
      <MudTd DataLabel="Full Name">@context.FullName</MudTd>
      <MudTd DataLabel="DOB">@context.DateOfBirth</MudTd> @* string in your model *@
      <MudTd DataLabel="School ID">@context.SchoolId</MudTd>
      <MudTd DataLabel="Status">
        @if (context.IsCompliant)
        {
          <MudChip T="string" Color="Color.Success" StartIcon="@Icons.Material.Filled.CheckCircle" Size="Size.Small">Compliant</MudChip>
        }
        else if (context.VaccineRecords.Any(v => v.Status == "Pending"))
        {
          <MudChip T="string" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Schedule" Size="Size.Small">Pending</MudChip>
        }
        else
        {
          <MudChip T="string" Color="Color.Error" StartIcon="@Icons.Material.Filled.Error" Size="Size.Small">Not Compliant</MudChip>
        }
      </MudTd>
      <MudTd DataLabel="Actions">
        <MudButton Size="Size.Small" Variant="Variant.Outlined"
                   StartIcon="@Icons.Material.Filled.Visibility"
                   OnClick="@(() => Nav.NavigateTo($"/student-details/{context.Id}"))">
          View
        </MudButton>
      </MudTd>
    </RowTemplate>
  </MudTable>
}

@code {
    private const string StatusAll = "";
    private const string StatusCompliant = "Compliant";
    private const string StatusPending = "Pending";
    private const string StatusNotCompliant = "Not Compliant";

    string SearchText = "";
    string StatusFilter = "";
    bool Searched = false;
    string? SchoolId;

    List<Student> Students = new();

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(state.User);
        SchoolId = user?.SchoolId;
    }

    void Search()
    {
        Searched = true;
        if (string.IsNullOrWhiteSpace(SchoolId))
        {
            Students.Clear();
            return;
        }

        var q = Db.Students.Where(s => s.SchoolId == SchoolId);

        if (!string.IsNullOrWhiteSpace(SearchText))
        {
            var t = SearchText.Trim();
            q = q.Where(s =>
                 s.SchoolId.Equals(t, StringComparison.OrdinalIgnoreCase)
              || s.SSN.Equals(t, StringComparison.OrdinalIgnoreCase)
              || s.FullName.Contains(t, StringComparison.OrdinalIgnoreCase));
        }

        var list = q.ToList();

        if (!string.IsNullOrEmpty(StatusFilter))
        {
            list = list.Where(s =>
                StatusFilter == "Compliant" && s.IsCompliant
             || StatusFilter == "Pending" && !s.IsCompliant && s.VaccineRecords.Any(v => v.Status == "Pending")
             || StatusFilter == "Not Compliant" && !s.IsCompliant && !s.VaccineRecords.Any(v => v.Status == "Pending")
            ).ToList();
        }

        Students = list;
    }

    void Clear()
    {
        SearchText = StatusFilter = "";
        Searched = false;
        Students.Clear();
    }
}


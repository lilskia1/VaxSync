@page "/"
@page "/home"
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Nav
@inject AuthenticationStateProvider AuthState

<PageTitle>VaxSync</PageTitle>

<style>
    .vx-split {
        display: flex;
        min-height: calc(100vh - 64px)
    }

    .vx-left {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        color: #fff;
        background: linear-gradient(135deg,#0B3D91,#1BA1E2);
        text-align: center;
        padding: 2rem
    }

    .vx-right {
        flex: 1;
        background: url("images/nurse-student.jpeg") center/cover no-repeat;
        position: relative
    }

        .vx-right::after {
            content: "";
            position: absolute;
            inset: 0;
            background: rgba(11,61,145,.25)
        }

    .vx-logo {
        width: 150px;
        margin-bottom: 1.5rem
    }

    .vx-buttons {
        display: flex;
        gap: 1rem;
        justify-content: center;
        margin-top: 1.5rem
    }
</style>

<div class="vx-split">
    <section class="vx-left">
        <img src="images/favicon.png" alt="VaxSync Logo" class="vx-logo" />
        <MudText Typo="Typo.h3" Class="fw-bold">VaxSync student vaccine hub</MudText>
        <MudText Typo="Typo.subtitle1" Class="opacity-75 mb-4">
            Track compliance, view alerts, and export records with confidence.
        </MudText>
    </section>

    <section class="vx-right"></section>
</div>

@code {
    private bool _navigated;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender || _navigated) return;

        var here = new Uri(Nav.Uri).AbsolutePath;

        try
        {
            var state = await AuthState.GetAuthenticationStateAsync();
            var authed = state.User?.Identity?.IsAuthenticated == true;

            var target = authed ? "/dashboard" : "/Account/Login";

            // don’t navigate if we’re already at the target
            if (Is(here, target)) return;

            _navigated = true; // set before navigating to prevent re-entry loops
            await InvokeAsync(() => Nav.NavigateTo(target, new NavigationOptions
            {
                ReplaceHistoryEntry = true,
                ForceLoad = false
            }));
        }
        catch (Microsoft.AspNetCore.Components.NavigationException)
        {
            // harmless during prerender; interactive pass will handle it
        }
        catch
        {
            // let the ErrorBoundary surface details, don’t kill first render
        }
    }

    private static bool Is(string path, string target) =>
        string.Equals(path, target, StringComparison.OrdinalIgnoreCase);
}
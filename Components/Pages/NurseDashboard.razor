@page "/nurse-dashboard"
@* @attribute [Authorize(Roles = "SchoolNurse")] *@
@using Microsoft.AspNetCore.Components
@using Microsoft.EntityFrameworkCore
@using System.Collections.Generic
@using VaxSync.Web.Data
@using VaxSync.Web.Models
@using VaxSync.Web.Components.Alerts
@inject ApplicationDbContext Db

<PageTitle>Nurse Dashboard</PageTitle>

<MudGrid Class="mb-6">
    <MudItem xs="12">
        <MudText Typo="Typo.h4">Nurse Panel</MudText>
        <MudText Class="mud-text-secondary">Your assigned school overview</MudText>
        <MudText Class="mud-text-caption mud-text-secondary">
            Currently showing: @ActiveSchoolDisplay. @* Append <code>?schoolId=&lt;code or id&gt;</code> to the URL to switch schools. *@
        </MudText>
    </MudItem>

    <MudItem xs="12" Class="d-flex justify-end mb-2">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/student-lookup">
            Go to student lookup
        </MudButton>
    </MudItem>

    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="p-4 metric-card">
            <MudText Typo="Typo.overline" Class="mud-text-secondary">Students</MudText>
            <MudText Typo="Typo.h4">@Totals.Total</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="p-4 metric-card">
            <MudText Typo="Typo.overline" Class="mud-text-secondary">Compliant</MudText>
            <MudText Typo="Typo.h4" Color="Color.Success">@Totals.Compliant</MudText>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" md="3">
        <MudPaper Class="p-4 metric-card">
            <MudText Typo="Typo.overline" Class="mud-text-secondary">Pending / Not</MudText>
            <MudText Typo="Typo.h4" Color="Color.Warning">@Totals.NonCompliant</MudText>
        </MudPaper>
    </MudItem>

    <MudItem xs="12" md="6">
        <MudPaper Class="p-4 h-100">
            <MudText Typo="Typo.h6" Class="mb-2">Compliance snapshot</MudText>
            <MudText Typo="Typo.caption" Class="mud-text-secondary mb-4">Students assigned to your school.</MudText>
            <MudChart ChartType="ChartType.Donut"
                      Labels="@complianceLabels"
                      ChartSeries="@complianceSeries"
                      Options="@complianceOptions"
                      Class="dashboard-chart" />
        </MudPaper>
    </MudItem>

    <MudItem xs="12">
        <MudPaper Class="p-4">
            <MudText Typo="Typo.h6" Class="mb-2">Overdue</MudText>
            <AlertsList Filter="AlertsList.AlertFilter.Overdue"
                        SchoolId="@_activeSchoolId"
                        ScopeToCurrentUser="false"
                        MaxItems="5"
                        ShowActions="true" />
            <MudButton Class="mt-2" Variant="Variant.Text" Href="/alerts">View all alerts</MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    public record TotalsVm(int Total, int Compliant, int NonCompliant);
    TotalsVm Totals = new(0, 0, 0);

    private readonly string[] complianceLabels = ["Compliant", "Pending / Not compliant"];
    private List<ChartSeries> complianceSeries = new();
    private readonly ChartOptions complianceOptions = new()
    {
        ChartPalette = new[] { "#16A34A", "#F59E0B" }
    };

    [SupplyParameterFromQuery(Name = "schoolId")]
    public string? SchoolIdQuery { get; set; }

    private string? _activeSchoolId;
    private string ActiveSchoolDisplay { get; set; } = "No school selected";

    protected override async Task OnParametersSetAsync()
    {
        var schools = await Db.Schools.AsNoTracking().ToListAsync();

        if (schools.Count == 0)
        {
            _activeSchoolId = null;
            ActiveSchoolDisplay = "No schools available";
            Totals = new(0, 0, 0);
            complianceSeries = new List<ChartSeries>();
            return;
        }

        School? selected = null;
        var requested = SchoolIdQuery?.Trim();
        if (!string.IsNullOrWhiteSpace(requested))
        {
            selected = schools.FirstOrDefault(s =>
                string.Equals(s.Id, requested, StringComparison.OrdinalIgnoreCase) ||
                (!string.IsNullOrWhiteSpace(s.Code) && string.Equals(s.Code, requested, StringComparison.OrdinalIgnoreCase)));
        }

        selected ??= schools.OrderBy(s => s.Name).First();

        _activeSchoolId = selected.Id;
        ActiveSchoolDisplay = string.IsNullOrWhiteSpace(selected.Code)
            ? selected.Name
            : $"{selected.Name} ({selected.Code})";

        var students = await Db.Students.AsNoTracking()
                        .Where(s => s.SchoolId == _activeSchoolId)
                        .ToListAsync();

        var total = students.Count;
        var compliant = students.Count(s => s.IsCompliant);
        Totals = new(total, compliant, total - compliant);

        complianceSeries = new List<ChartSeries>
        {
            new()
            {
                Name = "Students",
                Data = new double[] { Totals.Compliant, Totals.NonCompliant }
            }
        };
    }
}
